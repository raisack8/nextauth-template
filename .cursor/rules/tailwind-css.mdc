---
description: "Tailwind CSS styling rules and best practices"
globs: ["*.tsx"]
alwaysApply: false
---

# Tailwind CSS Styling Rules

Best practices for styling with Tailwind CSS.

## Core Principles

### Utility-First Approach
- Prioritize Tailwind classes over custom CSS
- Maintain consistency with reusable components
- Componentize complex styles

### Responsive Design
- Use mobile-first approach
- Apply appropriate breakpoints
- Use `sm:`, `md:`, `lg:`, `xl:`, `2xl:` prefixes

## Class Composition

### Logical Order
1. Layout (`flex`, `grid`, `block`)
2. Position (`relative`, `absolute`)
3. Size (`w-`, `h-`)
4. Spacing (`m-`, `p-`)
5. Typography (`text-`, `font-`)
6. Color (`bg-`, `text-`, `border-`)
7. Effects (`shadow-`, `opacity-`)
8. Interactions (`hover:`, `focus:`)

```tsx
// Good example
<div className="flex items-center justify-between w-full p-4 bg-white border border-gray-200 rounded-lg shadow-sm hover:shadow-md transition-shadow">
  <span className="text-lg font-semibold text-gray-900">Title</span>
  <button className="px-4 py-2 text-sm font-medium text-white bg-blue-600 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500">
    Button
  </button>
</div>
```

## Color Palette

### Unified Color System
- Primary: `blue-600`, `blue-700`, `blue-500`
- Secondary: `gray-600`, `gray-700`, `gray-500`
- Success: `green-600`, `green-700`, `green-500`
- Warning: `yellow-600`, `yellow-700`, `yellow-500`
- Error: `red-600`, `red-700`, `red-500`

### Semantic Colors
```tsx
// Status-based color usage
const getStatusColor = (status: string) => {
  switch (status) {
    case 'success': return 'text-green-600 bg-green-50 border-green-200';
    case 'warning': return 'text-yellow-600 bg-yellow-50 border-yellow-200';
    case 'error': return 'text-red-600 bg-red-50 border-red-200';
    default: return 'text-gray-600 bg-gray-50 border-gray-200';
  }
};
```

## Responsive Design

### Breakpoint Strategy
```tsx
// Mobile-first approach
<div className="
  w-full p-4
  sm:w-1/2 sm:p-6
  md:w-1/3 md:p-8
  lg:w-1/4 lg:p-10
  xl:w-1/5 xl:p-12
">
  Content
</div>
```

### Grid Layout
```tsx
// Responsive grid
<div className="grid grid-cols-1 gap-4 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4">
  {items.map(item => (
    <div key={item.id} className="p-4 bg-white rounded-lg shadow">
      {item.content}
    </div>
  ))}
</div>
```

## Component Patterns

### Button Variations
```tsx
const Button = ({ variant = 'primary', size = 'md', children, ...props }) => {
  const baseClasses = 'inline-flex items-center justify-center font-medium rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 transition-colors';
  
  const variants = {
    primary: 'bg-blue-600 text-white hover:bg-blue-700 focus:ring-blue-500',
    secondary: 'bg-gray-200 text-gray-900 hover:bg-gray-300 focus:ring-gray-500',
    outline: 'border border-gray-300 bg-white text-gray-700 hover:bg-gray-50 focus:ring-blue-500',
    ghost: 'text-gray-700 hover:bg-gray-100 focus:ring-gray-500',
  };
  
  const sizes = {
    sm: 'px-3 py-1.5 text-sm',
    md: 'px-4 py-2 text-sm',
    lg: 'px-6 py-3 text-base',
  };
  
  return (
    <button 
      className={`${baseClasses} ${variants[variant]} ${sizes[size]}`}
      {...props}
    >
      {children}
    </button>
  );
};
```

### Card Components
```tsx
const Card = ({ children, className = '', ...props }) => (
  <div 
    className={`bg-white border border-gray-200 rounded-lg shadow-sm ${className}`}
    {...props}
  >
    {children}
  </div>
);

const CardHeader = ({ children, className = '' }) => (
  <div className={`px-6 py-4 border-b border-gray-200 ${className}`}>
    {children}
  </div>
);

const CardContent = ({ children, className = '' }) => (
  <div className={`px-6 py-4 ${className}`}>
    {children}
  </div>
);
```

## Animations and Transitions

### Basic Transitions
```tsx
// Hover effects
<div className="transform transition-all duration-200 hover:scale-105 hover:shadow-lg">
  Hover to scale
</div>

// Fade in
<div className="opacity-0 animate-fade-in">
  Fade in element
</div>

// Slide in
<div className="translate-x-full animate-slide-in-left">
  Slide in element
</div>
```

### Custom Animations (tailwind.config.js)
```javascript
module.exports = {
  theme: {
    extend: {
      animation: {
        'fade-in': 'fadeIn 0.5s ease-in-out',
        'slide-in-left': 'slideInLeft 0.3s ease-out',
        'bounce-in': 'bounceIn 0.6s ease-out',
      },
      keyframes: {
        fadeIn: {
          '0%': { opacity: '0' },
          '100%': { opacity: '1' },
        },
        slideInLeft: {
          '0%': { transform: 'translateX(-100%)' },
          '100%': { transform: 'translateX(0)' },
        },
      },
    },
  },
};
```

## Form Styling

### Input Fields
```tsx
const Input = ({ label, error, ...props }) => (
  <div className="space-y-1">
    {label && (
      <label className="block text-sm font-medium text-gray-700">
        {label}
      </label>
    )}
    <input
      className={`
        block w-full px-3 py-2 border rounded-md shadow-sm
        focus:outline-none focus:ring-2 focus:ring-offset-2
        ${error 
          ? 'border-red-300 focus:ring-red-500 focus:border-red-500' 
          : 'border-gray-300 focus:ring-blue-500 focus:border-blue-500'
        }
      `}
      {...props}
    />
    {error && (
      <p className="text-sm text-red-600">{error}</p>
    )}
  </div>
);
```

## Dark Mode Support

### Dark Mode Classes
```tsx
<div className="bg-white dark:bg-gray-900 text-gray-900 dark:text-white">
  <h1 className="text-2xl font-bold text-gray-900 dark:text-white">
    Dark Mode Compatible Title
  </h1>
  <p className="text-gray-600 dark:text-gray-300">
    Description text
  </p>
</div>
```

## Performance Optimization

### Removing Unused Classes
- Verify PurgeCSS configuration
- Remove unused classes
- Utilize JIT mode

### Class Name Optimization
```tsx
// Conditional classes
const cn = (...classes: string[]) => classes.filter(Boolean).join(' ');

<div className={cn(
  'base-classes',
  isActive && 'active-classes',
  isDisabled && 'disabled-classes'
)}>
  Content
</div>
```

## Best Practices

### Patterns to Avoid
```tsx
// Bad: Overly complex class names
<div className="absolute top-0 left-0 right-0 bottom-0 flex items-center justify-center bg-black bg-opacity-50 z-50">

// Good: Componentized approach
const Modal = ({ children }) => (
  <div className="fixed inset-0 flex items-center justify-center bg-black/50 z-50">
    {children}
  </div>
);
```

### Component Reusability
- Componentize common patterns
- Build a design system
- Document with tools like Storybook

@button-component.tsx
@card-component.tsx